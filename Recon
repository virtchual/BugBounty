
Requirements:

$sudo apt update
$sudo apt upgrade
$sudo apt install zip curl wget git
$sudo apt install golang-go

__________________________________________________________________________________________________________________________________________________________________________________________________________________
SubFinder Install:

$go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
$sudo cp ~/go/bin/subfinder /usr/bin
$sudo subfinder -up
$subfinder

               __    _____           __         
   _______  __/ /_  / __(_)___  ____/ /__  _____
  / ___/ / / / __ \/ /_/ / __ \/ __  / _ \/ ___/
 (__  ) /_/ / /_/ / __/ / / / / /_/ /  __/ /    
/____/\__,_/_.___/_/ /_/_/ /_/\__,_/\___/_/

                projectdiscovery.io

[INF] Current subfinder version v2.6.7 (latest)


__________________________________________________________________________________________________________________________________________________________________________________________________________________
HTTPX Install:

$go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
$sudo cp ~/go/bin/httpx /usr/bin
$httpx dashboard
$go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
$httpx

    __    __  __       _  __
   / /_  / /_/ /_____ | |/ /
  / __ \/ __/ __/ __ \|   /
 / / / / /_/ /_/ /_/ /   |
/_/ /_/\__/\__/ .___/_/|_|
             /_/

                projectdiscovery.io

[INF] Current httpx version v1.6.9 (latest)
[WRN] UI Dashboard is disabled, Use -dashboard option to enable

OPTIONAL:
For GUI Dashboard:
#Go to "https://cloud.projectdiscovery.io"
#Create an account(Either through email,google or github)
#Click on your profile picture at top-right corner
#Select 'API key' option
#Copy your API key.

$httpx -dashboard

    __    __  __       _  __
   / /_  / /_/ /_____ | |/ /
  / __ \/ __/ __/ __ \|   /
 / / / / /_/ /_/ /_/ /   |
/_/ /_/\__/\__/ .___/_/|_|
             /_/

                projectdiscovery.io

[INF] Current httpx version v1.6.9 (latest)
[INF] To view results in UI dashboard, visit https://cloud.projectdiscovery.io/assets upon completion.
[INF] Get your free api key by signing up at https://cloud.projectdiscovery.io
[*] Enter PDCP API Key (exit to abort): API_KEY
[INF] Successfully logged in as (@Account_Name)

__________________________________________________________________________________________________________________________________________________________________________________________________________________
Katana Install:

$go install github.com/projectdiscovery/katana/cmd/katana@latest
$sudo cp ~/go/bin/Katana /usr/bin
$katana
   __        __                
  / /_____ _/ /____ ____  ___ _
 /  '_/ _  / __/ _  / _ \/ _  /
/_/\_\\_,_/\__/\_,_/_//_/\_,_/                                                   

                projectdiscovery.io

[INF] Current katana version v1.1.1 (latest)

__________________________________________________________________________________________________________________________________________________________________________________________________________________
Nuclei Install:

$go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
$sudo cp ~/go/bin/nuclei /usr/bin
$nuclei

                     __     _
   ____  __  _______/ /__  (_)
  / __ \/ / / / ___/ / _ \/ /
 / / / / /_/ / /__/ /  __/ /
/_/ /_/\__,_/\___/_/\___/_/   v3.2.9

                projectdiscovery.io
__________________________________________________________________________________________________________________________________________________________________________________________________________________
OPTIONAL:You can install all the above packages together with other extras by doing the following:

PDTM install:
$go install -v github.com/projectdiscovery/pdtm/cmd/pdtm@latest
$sudo cp ~/go/bin/pdtm /usr/bin
$sudo apt install -y libcap
$sudo apt install -y massdns
$pdtm -install-all
#pdtm -i package_name(To install specific package)
__________________________________________________________________________________________________________________________________________________________________________________________________________________
DirSearch Install:

First check your python version
$python --version

if python --verson >= 3.11 :

1. Using a Virtual Environment (Recommended)
   Creating a virtual environment ensures that your packages are isolated from the system's Python environment.

   # Step 1: Install the venv module if not already installed
   $sudo apt install python3-venv

   # Step 2: Create a virtual environment
   python3 -m venv myenv

   # Step 3: Activate the virtual environment
   source myenv/bin/activate

   # Step 4:Go to line 174

  To exit the virtual environment, run:
   deactivate
    

---
2. Using `--break-system-packages` (Not Recommended)
   If you want to override the restriction and install packages directly into the system Python environment, use the `--break-system-packages` flag.


   $sudo pip3 install package_name --break-system-packages
   (where package_name= dirsearch setup-tools psycopg2-binary psycopg2 psycopg mysql-connector-python-rf defusedcsv httpx_ntlm requests_toolbelt)``

    Warning:  This approach can lead to issues with system-managed Python packages and is discouraged for production systems.

---

3. Using pipx for Application Installation
   If you need install python packages for a standalone Python application, you can use `pipx` to create a virtual environment automatically.

   # Step 1: Install pipx if not already installed
   $sudo apt install pipx

   # Step 2: Use pipx to install the package
   $pipx install package_name
    (where package_name= dirsearch setup-tools psycopg2-binary psycopg2 psycopg mysql-connector-python-rf defusedcsv httpx_ntlm requests_toolbelt)
    

---

4. Installing System-Wide via APT
   To install Python packages system-wide, try apt install python3-xyz, where xyz is the package you are trying to install.

   $sudo apt install python3-xyz
    

---

else:

$pip3 install dirsearch setup-tools
#If errors : Execute line 180
$dirsearch -u target.com

                                          OR
$git clone https://github.com/maurosoria/dirsearch.git --depth 1
$pip3 install psycopg2-binary psycopg2 psycopg mysql-connector-python-rf defusedcsv httpx_ntlm requests_toolbelt
$dirsearch/dirsearch.py https://target.com

  _|. _ _  _  _  _ _|_    v0.4.3                                                                                                                                                           
 (_||| _) (/_(_|| (_| )                                                                                                                                                                    
                                                                                                                                                                                           
Extensions: php, asp, aspx, jsp, html, htm | HTTP method: GET | Threads: 25 | Wordlist size: 12266

Target: https://target.com

#If u get the below error after executing 'pip3 install' command then u need to follow the 'if' statement:

error: externally-managed-environment

× This environment is externally managed
╰─> To install Python packages system-wide, try apt install
    python3-xyz, where xyz is the package you are trying to
    install.
    
    If you wish to install a non-Kali-packaged Python package,
    create a virtual environment using python3 -m venv path/to/venv.
    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make
    sure you have pypy3-venv installed.
    
    If you wish to install a non-Kali-packaged Python application,
    it may be easiest to use pipx install xyz, which will manage a
    virtual environment for you. Make sure you have pipx installed.
    
    For more information, refer to the following:
    * https://www.kali.org/docs/general-use/python3-external-packages/
    * /usr/share/doc/python3.12/README.venv





__________________________________________________________________________________________________________________________________________________________________________________________________________________
Step 1 :Subdomain Enumeration
$subfinder -d domain.com --all -recursive >>subs.txt

Step 2:Filter Live Hosts
$cat subs.txt |httpx -td -title -sc -ip >>live.txt

Step 3:Run Nuclei for Vulnerabilities 
$nuclei -l live.txt -rl 10 -bs 2 -c 2 -as -silent -s critical,high,medium

Step 4: Filter for HTTP 200 Subdomains
$cat subs.txt | grep 200 | awk '{print $1}'

Step 5: Identify WAF Subdomains
$cat live.txt | grep 403

Step 6: Identify specific WAFs
$cat live.txt | grep -v -I -E 'cloudfront|cloudflare|imperva' | awk '{print $1}'

Step 7: Fetch Urls from sites
$katana -u subs.txt -d 5  waybackarchive,commoncrawl,alienvault -kf -jc -fx -ef woff,css,png,svg,jpg,woff2,jpeg,gif,svg >> allurls.txt
#katana -u subdomains_alive.txt -d 5 -ps -pss waybackarchive,commoncrawl,alienvault -kf -jc -fx -ef woff,css,png,svg,jpg,woff2,jpeg,gif,svg -o allurls.txt

Step 8: Identify secrets files
$cat allurls.txt | grep -E "\.txt|\.log|\.cache|\.secret|\.db|\.backup|\.yml|\.json|\.gz|\.rar|\.zip|\.config"

Step 9: Find Javascritpt files
$cat allurls.txt | grep -E "\.js$" >> js.txt

Step 10: Directory Brute-Forcing
$python3 dirsearch/dirsearch.py -u https://target.com -o dirs.txt -e xml,json,sql,db,log,yml,bak,txt,tar.gz,zip -x 301,403,404,500,400,502,503,302,429 
#dirsearch -u target.com -e xml, json, sql, db, log, yml, bak, txt, tar.gz, zip -x 301,403,404,500,400,502,503,302,429 --random-agent
#Do not use sudo for this one.

__________________________________________________________________________________________________________________________________________________________________________________________________________________

Internet Archive's Wayback Machine (https://archive.org/web/) :

$git clone https://github.com/tomnomnom/waybackurls
$cd waybackurls
$go build
$./waybackurls domain.com >subdomain.txt

__________________________________________________________________________________________________________________________________________________________________________________________________________________


   DNS Enumeration : 
     - Use tools like `dig`, `nslookup`, or `dnsrecon`:
        
       dnsrecon -d target.com 
        
     - Look for subdomains:
        
       subfinder -d target.com 
        
   Whois Information :
      
     whois target.com 
      
   -  Network Recon :
     - Check open ports and services:
        
       nmap -sC -sV target.com 
        
   Web Fingerprinting :
     - Identify technologies using tools like `whatweb`, `wappalyzer`, or `nuclei`.
        
       whatweb https://target.com 
        





__________________________________________________________________________________________________________________________________________________________________________________________________________________













__________________________________________________________________________________________________________________________________________________________________________________________________________________


__________________________________________________________________________________________________________________________________________________________________________________________________________________
